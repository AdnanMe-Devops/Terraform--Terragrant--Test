
func TestTerraformWebserverExample(t *testing.T) {


	// The values to pass into the Terraform CLI
	terraformOptions := terraform.WithDefaultRetryableErrors(t, 

&terraform.Options{
		
        // The path to where the example Terraform code is located
		TerraformDir: "../examples/webserver",

		// Variables to pass to the Terraform code using -

var options
		Vars: map[string]interface{}{
			"servername": "testwebserver",
		},
	})


	// Run a Terraform init and apply with the Terraform 

options
	terraform.InitAndApply(t, terraformOptions)

	// Run a Terraform Destroy at the end of the test
	defer terraform.Destroy(t, terraformOptions)

	// Retrieve the public IP address using Terraform Show
	publicIp := terraform.Output(t, terraformOptions, 

"public_ip")

	// Perform an HTTP request to the Public IP to validate 

status 200 and the body contains the following string
	url := fmt.Sprintf("http://%s:8080", publicIp)
	http_helper.HttpGetWithRetry(t, url, nil, 200, "Cloud 

Helo how r you  we  Are Great!", 30, 5*time.Second)
}
 
//A testing function is declared called TestTerraformWebserverExample. Testing functions in GO need to start with the word Test with a capital T followed by a capitalized letter after Test. This testing function will contain the code for 

the test.
//The variable terraformOptions is declared. In GO wecan declare variables using :=. Inside the variable declaration, the 
github.com/gruntwork-io/terratest/modules/terraform library is being used to pass values into Terraform. &terraform.Options is an object in Golang called a struct. The struct contains key-value 
pairs that make up a collection of settings that can be then passed into the Terraform CLI. This includes the directory of the 
Terraform example code to run for the test as well as the variables to input while performing a terraform apply.

